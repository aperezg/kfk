// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package kfk

import (
	"sync"
)

var (
	lockmessageHandlerMockHandle sync.RWMutex
)

// Ensure, that messageHandlerMock does implement messageHandler.
// If this is not the case, regenerate this file with moq.
var _ messageHandler = &messageHandlerMock{}

// messageHandlerMock is a mock implementation of messageHandler.
//
//     func TestSomethingThatUsesmessageHandler(t *testing.T) {
//
//         // make and configure a mocked messageHandler
//         mockedmessageHandler := &messageHandlerMock{
//             HandleFunc: func(in1 KafkaDecodedMessage) error {
// 	               panic("mock out the Handle method")
//             },
//         }
//
//         // use mockedmessageHandler in code that requires messageHandler
//         // and then make assertions.
//
//     }
type messageHandlerMock struct {
	// HandleFunc mocks the Handle method.
	HandleFunc func(in1 KafkaDecodedMessage) error

	// calls tracks calls to the methods.
	calls struct {
		// Handle holds details about calls to the Handle method.
		Handle []struct {
			// In1 is the in1 argument value.
			In1 KafkaDecodedMessage
		}
	}
}

// Handle calls HandleFunc.
func (mock *messageHandlerMock) Handle(in1 KafkaDecodedMessage) error {
	if mock.HandleFunc == nil {
		panic("messageHandlerMock.HandleFunc: method is nil but messageHandler.Handle was just called")
	}
	callInfo := struct {
		In1 KafkaDecodedMessage
	}{
		In1: in1,
	}
	lockmessageHandlerMockHandle.Lock()
	mock.calls.Handle = append(mock.calls.Handle, callInfo)
	lockmessageHandlerMockHandle.Unlock()
	return mock.HandleFunc(in1)
}

// HandleCalls gets all the calls that were made to Handle.
// Check the length with:
//     len(mockedmessageHandler.HandleCalls())
func (mock *messageHandlerMock) HandleCalls() []struct {
	In1 KafkaDecodedMessage
} {
	var calls []struct {
		In1 KafkaDecodedMessage
	}
	lockmessageHandlerMockHandle.RLock()
	calls = mock.calls.Handle
	lockmessageHandlerMockHandle.RUnlock()
	return calls
}
